#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_POINTING_DEFAULT_SCRL_VAL 80
#define ZKHK_JIS                  GRAVE                  // Zenkaku ↔ Hankaku ↔ Kanji (半角 ↔ 全角 ↔ 漢字)
#define MINUS_JIS                 MINUS                  // -
#define CARET_JIS                 EQUAL                  // ^
#define YEN_JIS                   INT3                   // ¥
#define AT_SIGN_JIS               LBKT                   // @
#define LEFT_BRACKET_JIS          RBKT                   // [
#define EISU_JIS                  CAPS                   // Eisū (英数)
#define SEMI_JIS                  SEMI                   // ;
#define COLON_JIS                 SQT                    // :
#define RIGHT_BRACKET_JIS         NUHS                   // ]
#define COMMA_JIS                 COMMA                  // ,
#define DOT_JIS                   DOT                    // .
#define SLASH_JIS                 SLASH                  // /
#define BACKSLASH_JIS             INT1                   // (backslash)
#define MHEN_JIS                  INT5                   // Muhenkan (無変換)
#define HENK_JIS                  INT4                   // Henkan (変換)
#define KANA_JIS                  INT2                   // Katakana ↔ Hiragana ↔ Rōmaji (カタカナ ↔ ひらがな ↔ ローマ字)
#define EXCLAMATION_JIS           LS(N1)                 // !
#define DOUBLE_QUOTE_JIS          LS(N2)                 // "
#define HASH_JIS                  LS(N3)                 // #
#define DOLLAR_JIS                LS(N4)                 // $
#define PERCENT_JIS               LS(N5)                 // %
#define AMPERSAND_JIS             LS(N6)                 // &
#define SINGLE_QUOTE_JIS          LS(N7)                 // '
#define LEFT_PARENTHESIS_JIS      LS(N8)                 // (
#define RIGHT_PARENTHESIS_JIS     LS(N9)                 // )
#define EQUAL_JIS                 LS(MINUS_JIS)          // =
#define TILDE_JIS                 LS(CARET_JIS)          // ~
#define PIPE_JIS                  LS(YEN_JIS)            // |
#define GRAVE_JIS                 LS(AT_SIGN_JIS)        // `
#define LEFT_BRACE_JIS            LS(LEFT_BRACKET_JIS)   // {
#define CAPS_JIS                  LS(EISU_JIS)           // Caps Lock
#define PLUS_JIS                  LS(SEMI_JIS)           // +
#define ASTERISK_JIS              LS(COLON_JIS)          // *
#define RIGHT_BRACE_JIS           LS(RIGHT_BRACKET_JIS)  // }
#define LT_JIS                    LS(COMMA_JIS)          // <
#define RT_JIS                    LS(DOT_JIS)            // >
#define QUESTION_JIS              LS(SLASH_JIS)          // ?
#define UNDER_JIS                 LS(BACKSLASH_JIS)      // _

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
    tapping-term-ms = <500>;
};

/ {
    combos {
        compatible = "zmk,combos";

        escape {
            bindings = <&kp ESC>;
            key-positions = <0 1>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <10 11>;
        };

        comment {
            bindings = <&kp LG(SLASH)>;
            key-positions = <12 13>;
        };

        back_quote {
            bindings = <&kp GRAVE>;
            layers = <0 1 2>;
            key-positions = <16 17>;
        };

        equal {
            bindings = <&kp EQUAL>;
            layers = <0 1 2>;
            key-positions = <17 18>;
        };

        back_quote_jis {
            bindings = <&kp GRAVE_JIS>;
            layers = <3 4>;
            key-positions = <16 17>;
        };

        equal_jis {
            bindings = <&equal_jis>;
            layers = <3 4>;
            key-positions = <17 18>;
        };

        back {
            bindings = <&kp LG(LEFT_ARROW)>;
            key-positions = <22 23>;
            layers = <0>;
        };

        next {
            bindings = <&kp LG(RIGHT_ARROW)>;
            key-positions = <23 24>;
            layers = <0>;
        };

        back_win {
            bindings = <&kp LA(LEFT_ARROW)>;
            key-positions = <22 23>;
            layers = <1 3>;
        };

        next_win {
            bindings = <&kp LA(RIGHT_ARROW)>;
            key-positions = <23 24>;
            layers = <1 3>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        bt_mac: bt_mac {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&mac_us &macro_param_1to2 &bt BT_SEL MACRO_PLACEHOLDER>;
            label = "BT_MAC";
        };

        bt_win: bt_win {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&win_us &macro_param_1to2 &bt BT_SEL MACRO_PLACEHOLDER>;
            label = "BT_WIN";
        };

        bt_win_jis: bt_win_jis {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&win_jis &macro_param_1to2 &bt BT_SEL MACRO_PLACEHOLDER>;
            label = "BT_WIN_JIS";
        };

        mac_us: mac_us {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&tog_off 1 &tog_off 3>;
            label = "MAC_US";
        };

        win_us: win_us {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&tog_on 1 &tog_off 3>;
            label = "WIN_US";
        };

        win_jis: win_jis {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&tog_off 1 &tog_on 3>;
            label = "WIN_JIS";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <500>;
        };

        encoder_msc_down_up: encoder_msc_down_up {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_MSC_DOWN_UP";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            tap-ms = <20>;
        };

        td_comma_left_parenthesis: td_comma_left_parenthesis {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_COMMA_LEFT_PARENTHESIS";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp LEFT_PARENTHESIS>;
        };

        td_dot_right_parenthesis: td_dot_right_parenthesis {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_DOT_RIGHT_PARENTHESIS";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp RIGHT_PARENTHESIS>;
        };

        single_quote_jis: single_quote_jis {
            compatible = "zmk,behavior-mod-morph";
            label = "SINGLE_QUOTE_JIS";
            #binding-cells = <0>;
            bindings = <&kp SINGLE_QUOTE_JIS>, <&kp DOUBLE_QUOTE_JIS>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        equal_jis: equal_jis {
            compatible = "zmk,behavior-mod-morph";
            label = "EQUAL_JIS";
            #binding-cells = <0>;
            bindings = <&kp EQUAL_JIS>, <&kp PLUS_JIS>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        minus_jis: minus_jis {
            compatible = "zmk,behavior-mod-morph";
            label = "MINUS_JIS";
            #binding-cells = <0>;
            bindings = <&kp MINUS_JIS>, <&kp UNDER_JIS>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        semi_jis: semi_jis {
            compatible = "zmk,behavior-mod-morph";
            label = "SEMI_JIS";
            #binding-cells = <0>;
            bindings = <&kp SEMI_JIS>, <&kp COLON_JIS>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mt_minus_jis: mt_minus_jis {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_MINUS_JIS";
            bindings = <&kp>, <&minus_jis>;

            #binding-cells = <2>;
            tapping-term-ms = <500>;
        };

        lt_semi_jis: lt_semi_jis {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_SEMI_JIS";
            bindings = <&mo>, <&semi_jis>;

            #binding-cells = <2>;
            tapping-term-ms = <500>;
        };

        td_comma_left_parenthesis_jis: td_comma_left_parenthesis_jis {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_COMMA_LEFT_PARENTHESIS_JIS";
            #binding-cells = <0>;
            bindings = <&kp COMMA_JIS>, <&kp LEFT_PARENTHESIS_JIS>;
        };

        td_dot_right_parenthesis_jis: td_dot_right_parenthesis_jis {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_DOT_RIGHT_PARENTHESIS_JIS";
            #binding-cells = <0>;
            bindings = <&kp DOT_JIS>, <&kp RIGHT_PARENTHESIS_JIS>;
        };

        tog_on: tog_on {
            compatible = "zmk,behavior-toggle-layer";
            label = "TOG_ON";
            #binding-cells = <1>;
        };

        tog_off: tog_off {
            compatible = "zmk,behavior-toggle-layer";
            label = "TOG_OFF";
            #binding-cells = <1>;
            toggle-mode = "off";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        MAC {
            bindings = <
&kp Q             &kp W         &kp E             &kp R        &kp T                                              &kp Y      &kp U  &kp I                       &kp O                      &kp P
&kp A             &kp S         &kp D             &kp F        &kp G      &mkp LCLK        &kp SINGLE_QUOTE       &kp H      &kp J  &kp K                       &lt 7 L                    &trans
&mt LEFT_SHIFT Z  &kp X         &kp C             &kp V        &kp B      &lt 5 SEMI       &mt RIGHT_SHIFT MINUS  &kp N      &kp M  &td_comma_left_parenthesis  &td_dot_right_parenthesis  &trans
&kp LEFT_GUI      &kp LEFT_ALT  &kp LEFT_CONTROL  &lt 2 LANG2  &kp SPACE  &lt 6 LANG1      &kp BACKSPACE          &kp ENTER                                                                &kp DELETE
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        WIN {
            bindings = <
&trans            &trans  &trans        &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans            &trans  &trans        &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans            &trans  &trans        &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_CONTROL  &trans  &kp LEFT_WIN  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        NUM {
            bindings = <
&kp NUMBER_1     &kp NUMBER_2  &kp NUMBER_3   &kp NUMBER_4  &kp N5                           &kp NUMBER_6  &kp N7          &kp N8           &kp N9            &kp N0
&kp EXCLAMATION  &kp AT_SIGN   &kp HASH       &kp DOLLAR    &kp PERCENT  &trans      &trans  &kp CARET     &kp AMPERSAND   &kp ASTERISK     &trans            &trans
&trans           &kp SLASH     &kp BACKSLASH  &kp PIPE      &kp TILDE    &trans      &trans  &kp QUESTION  &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp LEFT_BRACKET  &kp RIGHT_BRACKET
&trans           &trans        &trans         &trans        &trans       &trans      &trans  &trans                                                           &trans
            >;
        };

        WIN_JIS {
            bindings = <
&trans            &trans  &trans        &trans       &trans                                                    &trans  &trans  &trans                          &trans                         &trans
&trans            &trans  &trans        &trans       &trans  &trans                &single_quote_jis           &trans  &trans  &trans                          &trans                         &trans
&trans            &trans  &trans        &trans       &trans  &lt_semi_jis 5 0      &mt_minus_jis LEFT_SHIFT 0  &trans  &trans  &td_comma_left_parenthesis_jis  &td_dot_right_parenthesis_jis  &trans
&kp LEFT_CONTROL  &trans  &kp LEFT_WIN  &lt 4 LANG2  &trans  &trans                &trans                      &trans                                                                         &trans
            >;
        };

        NUM_JIS {
            bindings = <
&kp NUMBER_1         &kp NUMBER_2     &kp NUMBER_3       &kp NUMBER_4    &kp N5                               &kp NUMBER_6      &kp N7              &kp N8               &kp N9                &kp N0
&kp EXCLAMATION_JIS  &kp AT_SIGN_JIS  &kp HASH_JIS       &kp DOLLAR_JIS  &kp PERCENT_JIS  &trans      &trans  &kp CARET_JIS     &kp AMPERSAND_JIS   &kp ASTERISK_JIS     &trans                &trans
&trans               &kp SLASH_JIS    &kp BACKSLASH_JIS  &kp PIPE_JIS    &kp TILDE_JIS    &trans      &trans  &kp QUESTION_JIS  &kp LEFT_BRACE_JIS  &kp RIGHT_BRACE_JIS  &kp LEFT_BRACKET_JIS  &kp RIGHT_BRACKET_JIS
&trans               &trans           &trans             &trans          &trans           &trans      &trans  &trans                                                                           &trans
            >;
        };

        FUNCTION {
            bindings = <
&trans  &trans  &trans  &trans  &trans                           &bt_mac 0  &bt_mac 1  &bt_mac 2  &bt_win 3  &bt_win_jis 4
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &trans      &sys_reset   &kp F6     &kp F7     &kp F8     &kp F9     &kp F10
&trans  &trans  &trans  &trans  &trans  &trans      &bootloader  &trans     &trans     &mac_us    &win_us    &win_jis
&trans  &trans  &trans  &trans  &trans  &trans      &trans       &trans                                      &bt BT_CLR
            >;
        };

        MOUSE {
            bindings = <
&kp HOME        &kp LG(UP_ARROW)    &kp UP_ARROW         &kp LC(LS(TAB))     &kp LC(TAB)                                               &trans     &trans     &trans     &trans  &trans
&kp END         &kp LEFT_ARROW      &kp DOWN_ARROW       &kp RIGHT_ARROW     &trans               &trans                    &trans     &trans     &mkp LCLK  &mkp RCLK  &trans  &trans
&kp LEFT_SHIFT  &kp LC(LEFT_ARROW)  &kp LC(RIGHT_ARROW)  &kp LS(LEFT_ARROW)  &kp LS(RIGHT_ARROW)  &kp LG(LS(NUMBER_4))      &trans     &trans     &trans     &trans     &trans  &trans
&trans          &trans              &trans               &trans              &mkp LCLK            &mkp RCLK                 &mkp RCLK  &mkp LCLK                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };
    };
};
