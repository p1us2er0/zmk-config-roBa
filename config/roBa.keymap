#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_POINTING_DEFAULT_SCRL_VAL 80

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
    tapping-term-ms = <500>;
};

/ {
    combos {
        compatible = "zmk,combos";

        escape {
            bindings = <&kp ESC>;
            key-positions = <0 1>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <10 11>;
        };

        back_quote {
            bindings = <&kp GRAVE>;
            key-positions = <16 17>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <18 17>;
        };

        comment {
            bindings = <&kp LG(SLASH)>;
            key-positions = <12 13>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        bt_win: new_macro {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&tog 1 &macro_param_1to2 &bt BT_SEL MACRO_PLACEHOLDER>;
            label = "NEW_MACRO";
        };

        bt_mac: bt_mac {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to2 &bt BT_SEL MACRO_PLACEHOLDER>;
            label = "BT_MAC";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <500>;
        };

        encoder_msc_down_up: encoder_msc_down_up {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_MSC_DOWN_UP";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            tap-ms = <20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        DEFAULT {
            bindings = <
&kp Q             &kp W         &kp E             &kp R        &kp T                                              &kp Y      &kp U  &kp I      &kp O    &kp P
&kp A             &kp S         &kp D             &kp F        &kp G      &mkp LCLK        &kp SINGLE_QUOTE       &kp H      &kp J  &kp K      &lt 5 L  &kp LEFT_PARENTHESIS
&mt LEFT_SHIFT Z  &kp X         &kp C             &kp V        &kp B      &lt 3 SEMI       &mt RIGHT_SHIFT MINUS  &kp N      &kp M  &kp COMMA  &kp DOT  &kp RIGHT_PARENTHESIS
&kp LEFT_WIN      &kp LEFT_ALT  &kp LEFT_CONTROL  &lt 2 LANG2  &kp SPACE  &lt 4 LANG1      &kp BACKSPACE          &kp ENTER                             &trans
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        WIN {
            bindings = <
&trans            &trans  &trans        &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans            &trans  &trans        &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans            &trans  &trans        &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_CONTROL  &trans  &kp LEFT_WIN  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        NUM {
            bindings = <
&kp NUMBER_1     &kp NUMBER_2  &kp NUMBER_3   &kp NUMBER_4  &kp N5                           &kp NUMBER_6  &kp N7          &kp N8           &kp N9            &kp N0
&kp EXCLAMATION  &kp AT_SIGN   &kp HASH       &kp DOLLAR    &kp PERCENT  &trans      &trans  &kp CARET     &kp AMPERSAND   &kp ASTERISK     &kp PLUS          &kp EQUAL
&trans           &kp SLASH     &kp BACKSLASH  &kp PIPE      &kp TILDE    &trans      &trans  &kp QUESTION  &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp LEFT_BRACKET  &kp RIGHT_BRACKET
&trans           &trans        &trans         &trans        &trans       &trans      &trans  &trans                                                           &trans
            >;
        };

        FUNCTION {
            bindings = <
&trans  &trans  &trans  &trans  &trans                           &bt_mac 0  &bt_mac 1  &bt_mac 2  &bt_win 3  &bt_win 4
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &trans      &sys_reset   &kp F6     &kp F7     &kp F8     &kp F9     &kp F10
&trans  &trans  &trans  &trans  &trans  &trans      &bootloader  &tog 1     &trans     &trans     &trans     &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans       &trans                                      &bt BT_CLR
            >;
        };

        MOUSE {
            bindings = <
&kp HOME        &trans              &kp UP_ARROW         &kp LC(LS(TAB))         &kp LC(TAB)                                                   &trans     &trans     &trans     &trans  &trans
&kp END         &kp LEFT_ARROW      &kp DOWN_ARROW       &kp RIGHT_ARROW         &trans                   &trans                    &trans     &trans     &mkp LCLK  &mkp RCLK  &trans  &trans
&kp LEFT_SHIFT  &kp LC(LEFT_ARROW)  &kp LC(RIGHT_ARROW)  &kp LG(LS(LEFT_ARROW))  &kp LG(LS(RIGHT_ARROW))  &kp LG(LS(NUMBER_4))      &trans     &trans     &trans     &trans     &trans  &trans
&trans          &trans              &trans               &trans                  &mkp LCLK                &mkp RCLK                 &mkp RCLK  &mkp LCLK                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };
    };
};
